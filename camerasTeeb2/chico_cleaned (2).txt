<?php
// Inclui a conexão com o banco de dados
include 'conexao.php';

// Verifica se há um termo de busca
$search = isset($_GET['search']) ? trim($_GET['search']) : '';

// Modifica a query para filtrar os resultados
if (!empty($search)) {
    $sql = "SELECT id, nome, iframe, imagem FROM cad_cameras WHERE nome LIKE ?";
    $stmt = $conexao->prepare($sql);
    $searchTerm = "%$search%";
    $stmt->bind_param("s", $searchTerm);
    $stmt->execute();
    $resultado = $stmt->get_result();
} else {
    $sql = "SELECT id, nome, iframe, imagem FROM cad_cameras";
    $resultado = $conexao->query($sql);
}

// Seção principal das câmeras
echo '<section class="camera-section" id="cameras">';
echo '<div class="cameracamera">';
echo '    <h1>Câmeras</h1>';
echo '    <div class="camera-videos">';

if ($resultado->num_rows > 0) {
    while ($row = $resultado->fetch_assoc()) {
        $id = $row['id'];
        $nome = $row['nome'];
        $imagem = $row['imagem'];
        $iframe = $row['iframe'];

        echo "<div class='video-card' data-id='$id'>";
        echo "  <img src='$imagem' alt='$nome'>";
        echo "  <p>$nome</p>";
        echo "</div>";

        $iframe_proxy = str_replace("http://", "https://corsproxy.io/?", $iframe);

        echo "<div id='popup-$id' class='popup'>";
        echo "  <div class='popup-content'>";
        echo "    <div class='video-container'>";
        echo "      <span class='close' data-popup-id='popup-$id'>&times;</span>";
        echo "      <div id='video-container-$id' style='position: relative;'>";

        // Desabilita os eventos de toque no iframe
        echo "      <iframe id='iframe-$id' data-src='$iframe_proxy' title='$nome' frameborder='0' allow='autoplay; encrypted-media; fullscreen; picture-in-picture' allowfullscreen playsinline webkit-playsinline style='width:100%; pointer-events: none;'></iframe>";

        // Cria um overlay para os botões com pointer-events ativados
        echo "      <div style='position: absolute; bottom: 10px; right: 10px; pointer-events: auto; z-index: 10000;'>";
        echo "        <button onclick=\"enterFullScreen('video-container-$id')\" style='background-color: rgb(241, 196, 0); color: black; border: none; padding: 6px; border-radius: 12%; display: block;'>";
        echo "          <i class='fa fa-expand' aria-hidden='true'></i>";
        echo "        </button>";
        echo "        <button onclick='exitFullScreen()' style='background-color: rgb(241, 196, 0); color: black; border: none; padding: 6px; border-radius: 12%; display: none;'>";
        echo "          <i class='fa fa-compress' aria-hidden='true'></i>";
        echo "        </button>";
        echo "      </div>";
        echo "      </div>";

        echo "      <div id='video-description-$id'>";
        echo "        <h2>$nome</h2>";

        // Adicionando os contadores abaixo do nome da câmera
        $visualizacao = $conexao->query("SELECT total, online FROM visualizacoes WHERE camera_id = $id")->fetch_assoc();
        $totalViews = $visualizacao['total'] ?? 0;
        $onlineViews = $visualizacao['online'] ?? 0;

        echo "        <p>👀 Total: <span id='total-$id'>$totalViews</span></p>";
        echo "        <p>🔴 Ao Vivo: <span id='online-$id'>$onlineViews</span></p>";

        echo "      </div>";
        echo "    </div>";

        echo "    <div class='comentarios'>";
        echo "      <div class='comments-list' id='comments-list-$id'>";
        echo "        <h1>Comentários</h1>";
        echo "      </div>";
        echo "      <div class='comment-input-container'>";
        echo "        <textarea id='new-comment-$id' placeholder='Escreva um comentário...'></textarea>";
        echo "        <button id='submit-comment-$id'>Publicar</button>";
        echo "      </div>";
        echo "    </div>";
        echo "  </div>";
        echo "</div>";
    }
} else {
    echo "<p>Nenhuma câmera encontrada.</p>";
}

echo '</div>';
echo '</div>';

// Mantendo o side card
echo '<div class="side-card">';
echo '    <img src="imagens/postage.png" frameborder="0" width="300" alt="" class="add-img">';
echo '</div>';

echo '</section>';
?>




/* Estilos gerais */
body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    background-color: #f4f4f4;
    display: flex;
    flex-direction: column;
    min-height: 100vh;
    margin: 0;
    /* Remove margens do body */
    padding: 0;
    /* Remove padding do body */
    overflow-x: hidden;
    justify-content: center;
}

main {
    width: 100%;
    max-width: 1200px;
    background-color: #fff;
    padding: 0px;
    margin: 20px auto;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    border-radius: 8px;
}


.stripe-river-section {
    padding: 20px;
    background-color: #fff;
    border-bottom: 2px solid #ddd;
}


.card-group {
    display: flex;
    gap: 20px;
    margin-bottom: 5px;
    flex-wrap: wrap;
}

.card-group .card-class {
    flex: 1;
    min-width: 250px;
}

.layout-C3 {
    display: flex;
    flex-direction: column;
}

.layout-C3 .card-group {
    flex-direction: row;
}

.card-class {
    display: flex;
    align-items: center;

    padding: 10px;
    border-radius: 4px;
    background-color: #fff;
    box-shadow: 0 4px 6px rgba(60, 60, 60, 0.1);
    transition: transform 0.2s ease;
    margin-bottom: 0;
    height: 80px;
    width: 250px;
}


.card-class:hover {
    transform: translateY(-5px);
}


.card-class .text-content {
    flex: 1;
    padding-right: 10px;
}


.card-class img {
    width: 80px;
    height: 80px;
    border-radius: 5px;
}

.card-class h3 {
    margin: 0;
    font-size: 16px;
    color: #333;
}

.card-class p {
    color: #666;
    font-size: 12px;
    margin: 5px 0 0;
}


.layout-headlines {
    display: grid;
    grid-template-columns: 1fr 2fr;
    gap: 20px;
}


.layout-headlines {
    display: grid;
    grid-template-columns: 1fr 2fr;
    gap: 20px;
}


.main-headline {
    display: flex;
    width: 300px;
    flex-direction: column;
    background-color: #fff;
    border-radius: 6px;
    overflow: hidden;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    border: 1px solid #dddddd89;
    transition: transform 0.2s ease;

}

.main-headline img {
    width: 100%;
    height: auto;
}

.main-headline-content {
    padding: 15px;
}

.main-headline h3 {
    font-size: 20px;
}

.main-headline p {
    font-size: 14px;
}

.main-headline:hover {
    transform: translateY(-5px);
}

.secondary-headlines-container {
    display: flex;
    gap: 20px;
}


.secondary-headlines {
    display: flex;
    flex-direction: column;
    flex: 1;
}

.secondary-headlines .card-class {
    display: flex;
    align-items: center;
    border: 1px solid #dddddd63;
    padding: 5px 5px;
    border-radius: 0px;
    border: 1px 1px 0px 0px solid black;
    background-color: #fff;
    box-shadow: 0 2px 3px rgba(0, 0, 0, 0.155);
    transition: transform 0.2s ease;
    height: 100px;
}

.video-carddd {
    background-color: rgba(0, 0, 0, 0.856);
    color: whitesmoke;
    border: 1px solid #ddd;
    border-radius: 6px;
    overflow: hidden;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.186);
    transition: transform 0.2s ease, box-shadow 0.2s ease;
    margin: 5px;
    cursor: pointer;

}

.video-carddd img {
    width: 30px;
    height: 400px;
    border-radius: 5px;
    aspect-ratio: 16 / 9;

}

.secondary-headlines .card-class:first-child {
    border-radius: 4px 4px 0px 0px;

}

.secondary-headlines .card-class:last-child {
    border-radius: 0px 0px 4px 4px;
}

.secondary-headlines .card-class:hover {
    transform: translateY(-5px);
}

.secondary-headlines .card-class img {
    width: 100px;
    height: auto;
    border-radius: 5px;
}

.secondary-headlines .card-class .text-content {
    flex: 1;
    padding-right: 10px;
}

.secondary-headlines .card-class h3 {
    font-size: 16px;
}

.secondary-headlines .card-class p {
    font-size: 12px;
}


.stripe-river-section {
    padding: 20px;
    background-color: #fff;
    border-bottom: 2px solid #ddd;
}

.ad-banner-section {
    margin: 20px 0;
    text-align: center;
}

.ad-banner-section a {
    display: block;
}

.ad-banner-section img {
    width: 100%;
    max-width: 800px;
    height: auto;
    border: 1px solid rgba(80, 79, 79, 0.323);
}


.layout-news {
    display: flex;
    gap: 20px;
}


.main-news {
    display: flex;
    border-radius: 5px;
    flex-direction: column;

}

.main-news img {
    width: 530px;
    height: auto;
    border-radius: 8px;
}

.main-news h3 {
    margin-top: 10px;
    font-size: 20px;
    color: #333;
}

.main-news p {
    color: #666;
    font-size: 14px;
}


.side-news {
    flex: 1;
    display: grid;
    grid-template-columns: repeat(1, 1fr);

}


.side-news .card-class {
    display: flex;
    align-items: center;
    padding: 5px;
    border: 1px solid #ddd;
    border-radius: 4px;
    background-color: #fff;
    box-shadow: 0 3px 2px rgba(0, 0, 0, 0.051);
    transition: transform 0.2s ease;
    flex-direction: row-reverse;
    height: 80px;
    width: 320px;
}

.side-news .card-class:hover {
    transform: translateY(-5px);
}


.side-news .card-class img {
    width: 80px;
    height: 80px;
    border-radius: 5px;
}


.side-news .card-class div {
    flex: 1;
}

.side-news .card-class h3 {

    font-size: 16px;
    color: #333;
}

.side-news .card-class p {

    color: #666;
    font-size: 12px;
}

.camera-section {
    display: flex;
    justify-content: center;
    padding: 2px;
    gap: 0px;
}

.camera-videos {
    display: grid;
    margin: 0px;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    /* Garante que o grid se ajuste de acordo com o espaço */
    gap: 12px;
    padding: 0px;
    justify-items: center;
}

.video-column {
    display: flex;
    flex-direction: column;
    flex: 1;
}

.camera-videos .video-card {
    background-color: rgba(0, 0, 0, 0.856);
    color: whitesmoke;
    border: 1px solid #ddd;
    border-radius: 6px;
    overflow: hidden;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.186);
    transition: transform 0.2s ease, box-shadow 0.2s ease;
    cursor: pointer;
    width: 100%;
}

.camera-videos .video-card:hover {
    transform: translateY(-6px);
    box-shadow: 0 8px 12px rgba(0, 0, 0, 0.15);
}

.video-card img {
    width: 100%;
    height: 150px;
    object-fit: cover;

}

.video-card p {
    text-align: center;
    padding: 10px;
    margin: 0;
}

.video-cards {
    display: flex;
    flex-wrap: wrap;
}

.video-card {
    width: 370px;
    margin: 10px;
    cursor: pointer;
}

.video-card img {
    width: 100%;
    /* Imagem ocupará 100% da largura do card */
    height: 180px;
    object-fit: cover;
}

.popup {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.8);
    align-items: center;
    justify-content: center;
    z-index: 9999;
    overflow: auto;
    /* Garante que o conteúdo do popup possa rolar se for muito grande */
}

.popup-content {
    position: relative;
    width: 90%;
    max-width: 1200px;
    height: 85%;
    /* Ajuste a altura para evitar que ultrapasse a tela */
    background: #fff;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    display: flex;
    flex-direction: row;
    gap: 20px;
    overflow-y: auto;
    /* Garante que o conteúdo não saia do popup */
}

.cameracamera h1 {
    font-size: 30px;
}

.video-container {
    flex: 2;
    display: flex;
    flex-direction: column;

}

.video-container iframe {
    width: 100%;
    /* Largura total do contêiner */
    aspect-ratio: 16 / 9;
    /* Mantém a proporção 16:9 */
    border: none;
    /* Remove bordas */
    border-radius: 10px;
    /* Mantém bordas arredondadas */
    object-fit: fill;
    /* Ajusta o conteúdo dentro do contêiner */
}

.video-description {

    font-size: 14px;
    color: #333;
}


#comments-section-1 {

    flex: 1;
    overflow-y: auto;
    max-height: 100%;
    border-left: 1px solid #ddd;
    background-color: #f9f9f9;
    padding: 10px;
    border-radius: 4px;
}


.comments-list {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: 1px;
    overflow-y: auto;
    padding: 10px;
    background-color: #fff;
    border-radius: 4px;
    box-shadow: 0 1px 4px rgba(0, 0, 0, 0.1);
}

.comentarios {
    flex-direction: column;
    display: flex;
    flex-direction: column;
    height: 450px;
}

.comment {
    display: flex;
    flex-direction: column;
    align-items: self-start;


}


.comment-avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    object-fit: cover;
    display: block;
}



.comment-content {
    display: flex;
    flex-direction: column;
    flex: 1;
}


.comment-info {
    display: flex;
    gap: 5px;
    font-size: 12px;
    color: #555;
}

.comment-username {
    font-weight: bold;
    color: #000;
}

.comment-timestamp {
    font-size: 10px;
    color: #888;
}


.comment-text {
    font-size: 13px;
    color: #333;
    line-height: 1.4;
}

/* Caixa de entrada de novo comentário */
.comment-input-container {
    padding-top: 10px;
    border-top: 1px solid #ddd;
}

.comment-input-container textarea {
    width: 85%;
    height: 40px;
    padding: 8px;
    border-radius: 4px;
    border: 1px solid #ccc;
    font-size: 13px;
    resize: none;
}

.comment-input-container button {
    margin-top: 5px;
    align-self: flex-end;
    padding: 5px 10px;
    background-color: #007bff;
    color: #fff;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 12px;
}


.comment-input-container button:hover {
    background-color: #0056b3;
}


.comment-input-container textarea {
    width: 93%;
    height: 60px;
    padding: 10px;
    border-radius: 8px;
    border: 1px solid #ddd;
    font-size: 14px;
    resize: none;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

.comment-input-container button {
    margin-top: 10px;
    align-self: flex-end;
    padding: 10px 20px;
    background-color: #007bff;
    color: #fff;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 14px;
    transition: background-color 0.2s ease;
}

.comment-input-container button:hover {
    background-color: #0056b3;
}


.popup .close {
    position: absolute;
    top: -11px;
    right: 0px;
    font-size: 30px;
    color: #333;
    padding: 5px;
    border-radius: 50%;
    cursor: pointer;
    z-index: 10000;
}

.close:hover {
    color: #ff0000;
}



#video-container-1,
#video-container-2,
#video-container-3,
#video-container-4,
#video-container-5,
#video-container-6,
#video-container-7,
#video-container-8 {
    height: 900px;
    flex: 3;
    display: flex;
    flex-direction: column;
    padding: 0px;

}

#video-container-1 iframe,
#video-container-2 iframe,
#video-container-3 iframe,
#video-container-4 iframe,
#video-container-5 iframe,
#video-container-6 iframe,
#video-container-7 iframe,
#video-container-8 iframe {
    width: 100%;
    /* Preencher a largura do container */
    height: 100%;
    /* Preencher a altura do container */
    border: none;
    /* Remover bordas */
    display: block;
}

#comments-section-1,
#comments-section-2,
#comments-section-3,
#comments-section-4,
#comments-section-5,
#comments-section-6,
#comments-section-7,
#comments-section-8 {
    flex: 1;
    margin-left: 20px;
    padding-top: 20px;
    overflow-y: auto;
    max-height: 100%;
}

#video-description-1,
#video-description-2,
#video-description-3,
#video-description-4,
#video-description-5,
#video-description-6,
#video-description-7,
#video-description-8 {
    padding: 0px 5px 10px 5px;


}

.hidden-camera {

    display: none;

}

/* Estilo do botão */
#show-more-btn {
    display: block;
    margin: 20px auto;
    padding: 10px 20px;
    background-color: rgb(241, 196, 0);
    color: black;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
}

#show-more-btn:hover {
    background-color: rgb(241, 196, 0);
}

/* Botão de ocultar câmeras */
#hide-cameras-btn {
    display: block;
    margin: 20px auto;
    padding: 10px 20px;
    background-color: rgb(241, 196, 0);
    color: black;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
}

#hide-cameras-btn:hover {
    background-color: 00 rgb(241, 196, 0);
}
.video-card:hover,
.map-video-card:hover {
    cursor: pointer;
}
.side-card {
    display: block;
    flex: 0 0 24%;
    border: 1px solid #ddd;
    border-radius: 4px;
    margin: 4.5% 0px 0.5% 0px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    height: 630px;
    position: sticky;
    top: 10px;
}
.dark-mode .side-card {
    background-color: #1a1a1a;
    color: white;
    border: 2px solid #0000006b;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.7);
}

.side-card h3 {
    margin-top: 0;
}

body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    background-color: #f4f4f4;
}

.slider-container {
    width: 100%;
    margin: 20px auto;
    position: relative;
    overflow: hidden;
    border: 2px solid #ccc;
    background-color: #333;
    border-radius: 4px;
}

.slider {
    display: flex;
    transition: transform 0.5s ease-in-out;
    width: 100%;
    cursor: pointer;
}

.slide {
    min-width: 100%;
    height: 350px;
    position: relative;
}

.slide img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 15px;
}

.slide h3,
.slide p {
    position: absolute;
    color: white;
    /* Cor do texto */
    margin: 0;
    padding: 0;
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.7);
    /* Sombras para melhor leitura */
    z-index: 3;
}

.slide h3 {
    top: 260px;
    left: 20px;
}

.slide p {
    bottom: 36px;
    left: 20px;
}

/* Tela preta (overlay) na frente do slider */
.overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    /* Escurece o fundo */
    backdrop-filter: blur(5px);
    /* Aplica o desfoque */
    display: none;
    z-index: 999;
    /* Atrás do menu */
}

.overlayCima {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    /* Largura do overlay */
    height: 70%;
    /* Altura do overlay */
    background-color: rgba(0, 0, 0, 0.192);
    /* Cor preta com opacidade ajustável */
    pointer-events: none;
    /* Permite que os botões de navegação funcionem normalmente */
    z-index: 1;
    /* Coloca a tela preta acima das imagens mas abaixo dos textos */
}

/* Controle da navegação */
.slider-nav {
    pointer-events: none;
    display: none
}

.noticias-slide-container {
    display: flex;
    gap: 20px;
}

.noticias-slide {
    display: flex;
    flex-direction: column;
    flex: 1;
}

.noticias-slide .card-slide {
    display: flex;
    align-items: center;
    border: 1px solid #dddddd63;
    padding: 10.5px;
    border-radius: 0px;
    border: 1px 1px 0px 0px solid black;
    background-color: #fff;
    box-shadow: 0 2px 3px rgba(0, 0, 0, 0.155);
    transition: transform 0.2s ease;
    margin-top: 20px;
}

.noticias-slide .card-slide:first-child {
    border-radius: 4px 4px 0px 0px;
}

.noticias-slide .card-slide:last-child {
    border-radius: 0px 0px 4px 4px;
}

.noticias-slide .card-slide:hover {
    transform: translateY(-5px);
}

.noticias-slide .card-slide img {

    width: 80px;
    height: 80px;
    border-radius: 5px;
}

.noticias-slide .card-slide .text-content {
    flex: 1;
    padding-right: 10px;
}

.noticias-slide .card-slide h3 {
    font-size: 16px;
}

.noticias-slide .card-slide p {
    font-size: 12px;
}


.indicators {
    position: absolute;
    bottom: 15px;
    width: 100%;
    display: flex;
    justify-content: center;
}

.dot {
    height: 15px;
    width: 15px;
    margin: 0 5px;
    background-color: rgba(255, 255, 255, 0.5);
    border-radius: 50%;
    display: inline-block;
    transition: background-color 0.3s ease;
}

.dot.active {
    background-color: rgba(255, 255, 255, 1);
}

.dark-mode {
    background-color: #272727;
    color: #ffffff;
}

/* Estilo do cabeçalho no modo escuro */
.dark-mode header {
    background-color: #000000;
    border-bottom: 0.5px solid #64646451;
    /* Borda preta */
}

/* Estilo do menu de navegação no modo escuro */
.dark-mode #nav {
    background-color: #000000;
    border-bottom: 1px solid #000;
    /* Borda preta */
}

.dark-mode #nav a {
    color: white;
}

.dark-mode #nav a:hover {
    color: #000000;
}

/* Fundo do popup no modo escuro */
.dark-mode .popup-content {
    background-color: #000000;
    color: rgb(255, 255, 255);
    border: 1px solid #000;
    /* Borda preta */
}

/* Estilo dos botões no modo escuro */
.dark-mode button {
    background-color: #f4b400;
    color: white;
}


/* Estilo dos cartões de vídeo no modo escuro */
.dark-mode .video-card {
    background-color: #222;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.7);
    border: 1px solid #000;
    /* Borda preta */
}

/* Estilo das caixas de comentários */
.dark-mode .comment-input-container textarea {
    background-color: #333;
    color: white;
    border: 1px solid #000;
    /* Borda preta */
}

.dark-mode .comment {
    border: 1px solid #95949482;
    color: rgb(0, 0, 0);
    border: 1px solid #000;
    /* Borda preta */
}

/* Estilo do rodapé no modo escuro */
.dark-mode footer {
    background-color: #181818;
    color: white;
    border-top: 1px solid #000;
    /* Borda preta */
}

.dark-mode .footer-column a {
    color: #bbb;
}

.dark-mode .footer-column a:hover {
    color: #fff;
}

/* Estilo dos inputs no modo escuro */
.dark-mode input,
.dark-mode textarea {
    background-color: #222;
    color: white;
}

/* Modo escuro para o slider */
.dark-mode .slider-container {
    background-color: #222;
    border: 1px solid #000;
    /* Borda preta */
}



.animated-icon {
    width: 28px;
    height: 28px;
    color: white;
    position: relative;
}

.icon-transition {
    position: absolute;
    top: 50%;
    left: 50%;
    opacity: 0;
    transform-origin: center center;
    /* Centraliza a rotação */
    transform: translate(-50%, -50%) scale(1);
    transition: opacity 0.5s ease, transform 0.5s ease;
}

.moon-size {
    transform: translate(-50%, -50%) scale(1.3);
    /* Ajuste fino na escala */
}

#sun-icon.active {
    opacity: 1;
    transform: translate(-50%, -50%) rotate(360deg) scale(1);
}

#moon-icon.active {
    opacity: 1;
    transform: translate(-50%, -50%) rotate(360deg) scale(1.3);
}

#dark-mode-toggle {
    font-size: 24px;
    color: white;
    background: transparent;
    border: none;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: transform 0.3s ease;
    position: relative;
    gap: 25px;

}


/* Ícone gira ao mudar */
#theme-icon {
    transition: transform 0.5s ease, opacity 0.3s ease;
}

.rotate {
    transform: rotate(360deg);
}

/* Remove o hover amarelo APENAS do botão de tema */
#dark-mode-toggle:hover {
    background: transparent !important;
}

/* Ajustando seções específicas */
.dark-mode .search-bar,
.dark-mode .camera-section,
.dark-mode main,
.dark-mode .stripe-river-section,
.dark-mode .credits-section {
    background-color: #272727;
    color: white;
    border: 1px solid #272727;
    /* Borda preta */
}

/* Ajustando cartões */
.dark-mode .card-class,
.dark-mode .main-headline,
.dark-mode .secondary-headlines .card-class,
.dark-mode .noticias-slide .card-slide {
    background-color: #1a1a1a;
    color: white;
    border: 1px solid #000;
    /* Borda preta */
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.7);
}

.dark-mode .side-card {
    background-color: #1a1a1a;
    color: white;
    border: 1px solid #000;
    /* Borda preta */
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.7);
}

.dark-mode .popup {
    /* Fundo levemente translúcido para destacar o popup */
    background: rgba(21, 21, 21, 0.792);
}

.dark-mode .popup-content {
    background-color: #000;
    border: 1px solid #000;
    /* Borda preta */
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.7);
    /* Outras propriedades já existentes podem permanecer */
}


.dark-mode #comments-section-1,
.dark-mode #comments-section-2,
.dark-mode #comments-section-3,
.dark-mode #comments-section-4,
.dark-mode #comments-section-5,
.dark-mode #comments-section-6,
.dark-mode #comments-section-7,
.dark-mode #comments-section-8 {
    background-color: #000;
    border-left: 1px solid #000;
    /* Borda preta */
    color: rgb(0, 0, 0);
    padding: 10px;
}


.dark-mode .comment-input-container button {
    background-color: rgb(241, 196, 0);
    /* Amarelo */
    color: #fff;
    border: 1px solid #000;
    /* Borda preta */
    cursor: pointer;
    transition: background-color 0.2s ease;
}

.dark-mode .comment-input-container button:hover {
    background-color: rgb(230, 180, 0);
    /* Tom ligeiramente mais escuro ao passar o mouse */
}

.dark-mode .comments-list {
    background-color: #000;
    color: white;
    gap: 4px;
}

.dark-mode .comment-username {
    color: white;
}

.comment-header i {
    color: rgba(90, 89, 89, 0.831);
}

.dark-mode .comment-text p {
    color: #ffffffdb;
}

.dark-mode .comment-timestamp {
    color: #d4d4d4;
}

.dark-mode .comment-input-container {
    border-top: 1px solid #dddddd4d;
}

.dark-mode .comment {
    border-radius: 5px;
    padding: 5px 0px 5px 5px;
    border: 1px solid #95949482;
    ;
}

.dark-mode::-webkit-scrollbar {
    width: 10px;
    /* Largura da barra de rolagem */
}

.dark-mode::-webkit-scrollbar-track {
    background: #121212;
    /* Cor do fundo da barra */
}

.dark-mode::-webkit-scrollbar-thumb {
    background: #f1c400;
    /* Cor da parte móvel do scroll */
    border-radius: 10px;
    /* Deixa o scroll mais arredondado */
}

.dark-mode::-webkit-scrollbar-thumb:hover {
    background: #d1a800;
    /* Cor ao passar o mouse */
}

/* Para navegadores baseados em WebKit (Chrome, Edge, Safari) */
.dark-mode .popup-content::-webkit-scrollbar {
    width: 8px;
}

.dark-mode .popup-content::-webkit-scrollbar-track {
    background: #121212;
    /* Cor do fundo do scroll no modo escuro */
}

.dark-mode .popup-content::-webkit-scrollbar-thumb {
    background: #f1c400 !important;
    /* Cor da parte móvel do scroll */
    border-radius: 10px;
}

.dark-mode .popup-content::-webkit-scrollbar-thumb:hover {
    background: #d1a800 !important;
    /* Cor ao passar o mouse */
}

/* Para Firefox */
.dark-mode .popup-content {
    scrollbar-width: thin;
    scrollbar-color: #f1c400 #121212;
    /* Cor do scroll e do fundo */
}

.dark-mode .credits-section h2 {
    color: white;
}

/* Garante que o autocomplete fique do tamanho do input e centralizado */
.autocomplete-results {
    position: absolute;
    width: 50%;
    /* Ajuste para ficar do tamanho do input */
    left: 39.5%;
    /* Centraliza em relação ao input */
    transform: translateX(-50%);
    /* Corrige a posição para alinhar certinho */
    background: white;
    border: 1px solid #ddd;
    max-height: 200px;
    overflow-y: auto;
    display: none;
    z-index: 1000;
    border-radius: 5px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    top: 84%;
    /* Mantém abaixo do input */
}

/* Define a posição relativa da barra de busca */
.search-bar {
    position: relative;
    display: flex;
    justify-content: center;
    /* Centraliza o conteúdo */
    align-items: center;
}

/* Estilo dos itens do autocomplete */
.autocomplete-item {
    padding: 10px;
    cursor: pointer;
    border-bottom: 1px solid #ddd;
    background-color: #fff;
    transition: background-color 0.3s ease;
    color: #00000099;
    font-size: 14px;
    text-align: left;
}

.autocomplete-item:last-child {
    border-bottom: none;
}

.autocomplete-item:hover {
    background: rgb(241, 196, 0);
    color: black;
}

/* AUTOCOMPLETE DARK MODE */
.dark-mode .autocomplete-results {
    background: #1e1e1e;
    border: 1px solid #333;
    box-shadow: 0 4px 6px rgba(255, 255, 255, 0.1);
}

.dark-mode .autocomplete-item {
    background-color: #272727;
    color: white;
    border-bottom: 1px solid #444;
}

.dark-mode .autocomplete-item:hover {
    background: rgb(241, 196, 0);
    color: black;
}

/* Ajusta apenas os cards do mapa, sem afetar os da seção de câmeras */
.map-video-card {
    width: 200px;
    /* Ajuste conforme necessário */
    height: auto;
    /* Mantém a proporção automática */
    padding: 8px;
    box-shadow: 0 3px 5px rgba(0, 0, 0, 0.2);
    background-color: #000000;
    color: white;
    border-radius: 6px;
}

/* Ajuste a imagem para um tamanho menor no mapa */
.map-video-card img {
    width: 100%;
    /* Ocupa toda a largura do card */
    height: 100px;
    /* Defina um tamanho fixo */
    object-fit: cover;
    border-radius: 5px;
}

/* Ajuste o tamanho do texto no card do mapa */
.map-video-card p {
    font-size: 14px;
    color: #ffffff;
    text-align: center;
    margin-top: 5px;
}

.dark-mode-container {
    display: flex;
    align-items: center;
    gap: 15px;

}

.dark-mode-text {
    font-weight: bold;
}

.switch {
    position: relative;
    display: inline-block;
    width: 40px;
    height: 20px;
}

.switch input {
    opacity: 0;
    width: 0;
    height: 0;
    position: absolute;
}

/* Estilo do botão toggle */
.toggle-btn {
    position: relative;
    width: 40px;
    height: 20px;
    background-color: #ccc;
    border-radius: 20px;
    transition: background-color 0.3s ease-in-out;
    cursor: pointer;
}

.toggle-btn::before {
    content: "";
    position: absolute;
    width: 14px;
    height: 14px;
    background-color: white;
    border-radius: 50%;
    transition: transform 0.3s ease-in-out;
    left: 3px;
    bottom: 3px;
}

.toggle-btn.active {
    background-color: #f4b400;
}

.toggle-btn.active::before {
    transform: translateX(20px);
}


/* Quando ativado */
input:checked+.toggle-btn {
    background-color: #f4b400;
}

input:checked+.toggle-btn:before {
    transform: translateX(20px);
}

/* Garante que o espaço reservado pelo switch não mude */
.switch,
.toggle-btn,
.toggle-btn:before {
    display: block;
    box-sizing: border-box;
}

/* Oculta o texto e o botão em telas maiores */
.only-icon #dark-mode-toggle {
    background: none;
    border: none;
    cursor: pointer;
    font-size: 22px;
}

/* Em telas maiores, exibe apenas o ícone */
.only-icon .dark-mode-text,
.only-icon .switch-container {
    display: none;
}

/* Em dispositivos móveis, garante que tudo apareça */
.dark-mode-container {
    display: flex;
    align-items: center;
    gap: 10px;
}

/* Animação do ícone */
#theme-icon {
    transition: transform 0.5s ease, opacity 0.3s ease;
}

.rotate {
    transform: rotate(360deg);
}

/* Evita hover específico no container do modo escuro */
#navLinks li.dark-mode-container:hover {
    background-color: transparent;
}

.dark-mode .popup .close {
    color: #ffffff;
    /* mantém branco no modo escuro */
    background-color: transparent;
}

.no-scroll {

    width: 100%;
    height: 100vh;
    overflow: hidden;
    touch-action: none !important;
    /* Impede rolagem em dispositivos móveis */
}
.comment-icon {
    font-size: 1.2rem;
    padding: 8px;
    margin-right: 10px;
    color: #fff;
  }


.autocomplete-item.selected {
    background-color: rgb(241, 196, 0);;
}

  #cameras-tiangua {
  display: block;
}

#cameras-tiangua .cameracamera {
  width: 100%;
}
  
  @media (max-width: 768px) {
    .ad-image {
        width: 100%;
        height: 350px; /* Ajuste a altura conforme necessário */
        background-image: url("imagens/bannerSlider2.png"); /* Imagem da versão mobile */
        background-size: cover; /* Garante que a imagem apareça inteira */
        background-position: center;
        background-repeat: no-repeat;
    }
}
@media (min-width: 799px) {
    .ad-image {
        width: 100%;
  
        background-image: url("imagens/bannerSlider.png"); /* Imagem da versão mobile */
        background-size: cover; /* Garante que a imagem apareça inteira */
        background-position: center;
        background-repeat: no-repeat;
    }
}

/* Ajuste para telas menores que 480px */
@media (max-width: 480px) {

    .autocomplete-results {
        position: absolute;
        width: 50%;
        /* Ajuste para ficar do tamanho do input */
        left: 39.5%;
        /* Centraliza em relação ao input */
        transform: translateX(-50%);
        /* Corrige a posição para alinhar certinho */
        background: white;
        border: 1px solid #ddd;
        max-height: 200px;
        overflow-y: auto;
        display: none;
        z-index: 1000;
        border-radius: 5px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        top: 84%;
        /* Mantém abaixo do input */
    }
}
  

    @media (max-width: 600px) {
        .logo img {
            margin-bottom: -10%;
    }

    #nav ul {
        gap: 5px;
        align-items: flex-start;
    }

    #navLinks li:hover {
        background-color: rgb(241, 196, 0);
    }

    /*.video-container iframe,*/
    #video-container-1 iframe,
    #video-container-2 iframe,
    #video-container-3 iframe,
    #video-container-4 iframe,
    #video-container-5 iframe,
    #video-container-6 iframe,
    #video-container-7 iframe,
    #video-container-8 iframe {
        width: 100%;
        border-radius: 0px;
        border: none;
    }

    #video-container-1,
    #video-container-2,
    #video-container-3,
    #video-container-4,
    #video-container-5,
    #video-container-6,
    #video-container-7,
    #video-container-8 {

        flex: 3;
        display: flex;
        flex-direction: column;
        padding: 0px;

    }

    .camera-section {
        flex-direction: column;
    }

    .camera-videos {
        grid-template-columns: 1fr;
        /* Apenas uma coluna para resoluções abaixo de 600px */
    }

    .video-card {

        position: relative;
        /* Permite posicionamento do texto sobre a imagem */
        width: 100%;
        height: auto;
        /* Aumenta a altura dos vídeos */
        overflow: hidden;
        /* Garante que a imagem não ultrapasse o cartão */
    }

    .video-card img {
        aspect-ratio: 16 / 9;
        width: 100%;
        height: 200px;
        object-fit: cover;
        /* Faz a imagem cobrir o cartão de maneira proporcional */
    }

    .video-card p {
        position: absolute;
        top: 90%;
        left: 50%;
        transform: translate(-50%, -50%);
        /* Centraliza o texto */
        font-size: 16px;
        /* Aumenta o tamanho do texto */
        padding: 12px;
        color: whitesmoke;
        text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.7);
        /* Adiciona sombra para melhor legibilidade */
        z-index: 2;
        /* Garante que o texto fique acima da imagem */
        background-color: rgba(0, 0, 0, 0.856);
        /* Fundo semitransparente para melhor contraste */
        text-align: center;
        width: 100%;
    }

    .video-card:nth-child(n+5) {
        display: block;
        /* Esconde todas as câmeras a partir da quarta */
    }

    .hidden-camera {
        opacity: 0;
        transition: opacity 0.5s ease-in-out, transform 0.5s ease-in-out;
        display: none;
        transform: translateY(20px);
    }

    .hidden-camera.show {
        display: block;
        opacity: 1;
        transform: translateY(0);
    }

    .side-card {
        display: flex;
        /* Ativa o Flexbox */
        justify-content: center;
        /* Centraliza horizontalmente */
        align-items: center;
        /* Centraliza verticalmente */
        max-width: 300px;
        /* Largura máxima do card */
        height: auto;
        /* Altura automática para ajustar o conteúdo */
        margin: 20px auto;
        /* Altura automática para o card lateral */
    }

    .add-img {
        max-width: 100%;
        /* Garante que a imagem se ajuste ao tamanho do card */
        height: auto;
        content: url('/imagens/post.png');
    }

    .popup-content {
        flex-direction: column;
        /* Coluna em telas menores */
        width: 95%;
        max-height: 95%;
        /* Limita a altura para telas muito pequenas */
        padding: 0px 0px;
        overflow: scroll;
        max-height: 70%;
    }

    .video-container iframe {
        width: 100%;
        /* Largura total do iframe */
        height: 25vh;
        /* Altura do iframe ocupando 50% da altura da tela */
        border: none;
        border-radius: 0px;
        /* Limita a altura máxima */
    }

    .comment-text {
        font-size: 11px;
    }

    .comment-input-container textarea {
        height: 40px;
        font-size: 11px;
    }

    .comment-input-container button {
        font-size: 11px;
    }

    #comments-section-1 {

        overflow-y: auto;
        /* Permite rolagem vertical */

    }

    .close {
        font-size: 27px;
        top: 1px;
    }

    .comments-list {
        padding: 15px;
        margin-top: -8%;
    }
    .ad-image {
        background-image: url("imagens/bannerSlider2.png");
      }

    #video-description-1,
    #video-description-2,
    #video-description-3,
    #video-description-4,
    #video-description-5,
    #video-description-6,
    #video-description-7,
    #video-description-8 {
        padding: 10px;


    }

    .comment-input-container {
        padding: 10px 10px 10px 10px;
    }

    .layout-news {
        display: flex;
        gap: 20px;
        flex-direction: column;
    }

    .dark-mode .comment {
        border-radius: 5px;
        padding: 5px 0px 5px 5px !important;
    }

    .dark-mode-container {
        padding-left: 18px !important;
    }
}

/* Adicionando responsividade para telas menores */
@media (min-width: 600px) and (max-width: 900px) {
    .video {
        height: 300px;
    }

    main {
        width: 100%;
        max-width: 90%;
        background-color: #fff;
        padding: 2px;
        margin: 20px auto;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        border-radius: 8px;
    }

    .camera-section {
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        padding: 20px;
        gap: 15px;
    }
    
    .cameras-tiangua {
        display: flex;
        justify-content: space-between;
        padding: 20px;
        gap: 15px;
        flex-direction: column;
    }

    .camera-videos {
        grid-template-columns: repeat(2, 1fr);
        /* 2 colunas entre 600px e 900px */
    }

    .video-card {
        position: relative;
        /* Permite posicionamento do texto sobre a imagem */
        width: 100%;
        height: 250px;
        /* Aumenta a altura dos vídeos */
        overflow: hidden;
        /* Garante que a imagem não ultrapasse o cartão */
    }

    .video-card img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        /* Faz a imagem cobrir o cartão de maneira proporcional */
    }

    .video-card p {
        position: absolute;
        top: 90%;
        left: 50%;
        transform: translate(-50%, -50%);
        /* Centraliza o texto */
        font-size: 16px;
        /* Aumenta o tamanho do texto */
        padding: 12px;
        color: whitesmoke;
        background-color: rgba(0, 0, 0, 0.856);
        /* Adiciona sombra para melhor legibilidade */
        z-index: 2;
        /* Garante que o texto fique acima da imagem */
        background-color: rgb(0, 0, 0);
        /* Fundo semitransparente para melhor contraste */
        text-align: center;
        width: 100%;
    }

    .dark-mode .comment {
        border-radius: 5px;
        padding: 5px 0px 5px 5px;
    }

    #video-container-1 iframe,
    #video-container-2 iframe,
    #video-container-3 iframe,
    #video-container-4 iframe,
    #video-container-5 iframe,
    #video-container-6 iframe,
    #video-container-7 iframe,
    #video-container-8 iframe {
        width: 100%;
        /* Ajusta a altura do vídeo de acordo com a altura da tela */
        border-radius: 8px;
        border: none;
    }


    #video-container-1,
    #video-container-2,
    #video-container-3,
    #video-container-4,
    #video-container-5,
    #video-container-6,
    #video-container-7,
    #video-container-8 {

        flex: 3;
        display: flex;
        flex-direction: column;
        padding: 0px;
    }

    .popup-content {
        flex-direction: column;
        /* Coluna em telas menores */
        width: 95%;
        max-height: 95%;
        /* Limita a altura para telas muito pequenas */
        padding: 0px 0px;
        overflow: scroll;
        max-height: 70%;
        /* Cor de fundo do popup */
    }

    .video-container iframe {
        width: 100%;
        /* Aumenta a altura do vídeo para 30% da tela */
        border-radius: 8px;
        border: none;
        /* Largura total do contêiner */
        aspect-ratio: 16 / 9;
        /* Mantém a proporção 16:9 */

    }

    .comment-text {
        font-size: 14px;
    }

    .comment-input-container textarea {
        height: 60px;
        font-size: 14px;
    }

    .comment-input-container button {
        font-size: 14px;
    }

    #video-description-1,
    #video-description-2,
    #video-description-3,
    #video-description-4,
    #video-description-5,
    #video-description-6,
    #video-description-7,
    #video-description-8 {
        padding: 10px;


    }

    .close {
        font-size: 30px;
        top: 10px;
    }

    .comments-list {
        padding: 20px;
    }

    .side-card {
        display: flex;
        /* Ativa o Flexbox */
        justify-content: center;
        /* Centraliza horizontalmente */
        align-items: center;
        /* Centraliza verticalmente */
        max-width: 300px;
        /* Largura máxima do card */
        height: auto;
        /* Altura automática para ajustar o conteúdo */
        margin: 20px auto;
        /* Altura automática para o card lateral */
        position: relative;
    }

    .add-img {
        max-width: 100%;
        position: relative;
        /* Garante que a imagem se ajuste ao tamanho do card */
        height: auto;
        content: url('/imagens/Instagram\ post\ para\ provedor\ de\ internet\ corporativo\ laranja\ \(300\ x\ 250\ px\).png');
    }
}

.credits-section {
    padding: 30px 20px;
    background-color: #f5f5f5;
    text-align: center;
}

.credits-section h2 {
    font-size: 2rem;
    margin-bottom: 30px;
    color: #333;
}

/* Grid de equipe ajustado para duas colunas */
.team-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    /* Força duas colunas */
    gap: 20px;
    /* Espaçamento entre os cards */
    justify-content: center;
    /* Centraliza os cards horizontalmente */
    max-width: 800px;
    /* Limita a largura máxima do grid */
    margin: 0 auto;
    /* Centraliza o grid na página */
}

/* Estilo dos cards individuais */
.team-card {
    background-color: #fff;
    border-radius: 15px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    padding: 10px;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    overflow: hidden;
    max-width: 400px;
    /* Define um tamanho máximo para os cards */
    margin: 0 auto;
    /* Centraliza os cards dentro das colunas */
}

.team-card:hover {
    transform: translateY(-10px);
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
}

.team-card img {
    width: 90%;
    height: auto;
    border-radius: 10px;
    transition: transform 0.3s ease;
}

.team-card:hover img {
    transform: scale(1.05);
}

.team-card h3 {
    font-size: 1.5rem;
    margin: 10px 0 5px;
    color: #333;
}

.team-card p {
    color: #666;
    font-size: 1rem;
    margin: 5px 0;
}@media (max-width){
    #nav{
        top: 8%;
    }
}
/* Responsividade para larguras acima de 900px */
@media (max-width: 480px) {
    .credits-section h2 {
        font-size: 1.8rem;
    }

    .team-grid {
        grid-template-columns: 2fr;
        gap: 10px;
        padding: 0 10px;
        /* Adicionado um padding ao redor dos cards */
    }

    .team-card {
        padding: 10px;
        max-width: 90%;
        /* Reduzido o tamanho máximo dos cards para 90% da largura */
        margin: 0 auto;
        /* Centralizar o card */
    }

    .team-card h3 {
        font-size: 1.2rem;
    }

    .team-card p {
        font-size: 0.85rem;
    }

    .team-card img {
        width: 90%;
        height: auto;
        border-radius: 10px;
        transition: transform 0.3s ease;
    }

    .team-card:hover img {
        transform: scale(1.05);
    }
   
}

@media (min-width: 769px) {
    .toggle-btn {
        display: none !important;
    }
}

@media (max-width: 768px) {
    .team-grid {
        grid-template-columns: repeat(auto-fit, minmax(200px, 2fr));
        gap: 15px;
    }

    .team-card {
        padding: 15px;
    }

    .team-card h3 {
        font-size: 1.4rem;
    }

    .team-card p {
        font-size: 0.9rem;
    }

    .popup-content {
        /* Evita que ultrapasse a tela */
        overflow-y: auto;
        /* Permite rolagem interna no popup */
    }


    #dark-mode-menu button {
        display: flex;
        align-items: center;
        gap: 15px;
        /* Espaço entre o ícone e o texto */
        font-weight: bold;
        padding: 5px 8px
    }

    .dark-mode-text {
        display: inline;
        font-size: 16px;
        color: white;
    }

    #navLinks li a {
        display: flex;
        align-items: center;
    }

    /* Ajusta todos os ícones do menu */
    #navLinks li a i {
        margin-right: 15px;
        /* Adiciona espaçamento maior entre o ícone e o texto */
        font-size: 20px;
        /* Mantém os ícones bem visíveis */
    }

    .menu-toggle i {
        font-size: 26px;
        transition: transform 0.3s ease;
        width: 26px;
        height: 26px;
        display: flex;
        align-items: center;
        justify-content: center;
    }


    .menu-toggle i.fa-times {
        transform: rotate(180deg);
    }

    .popup .close {
        font-size: 30px;
        top: -10px;
        right: 5px;
        padding: 8px;
    }
    .popup-content {
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        max-height: 70vh; /* Evita que o pop-up ultrapasse a tela */
        width: 95vw; /* Ajusta o tamanho no mobile */
        border-radius: 8px;
        overflow: hidden;
      }
      
      .comment-section {
        flex-grow: 1; /* Faz a área de comentários ocupar o espaço disponível */
        overflow-y: auto; /* Adiciona rolagem caso necessário */
        padding: 16px;
      }
      
      .comment-input-container {
        position: sticky;
        bottom: 0;
        background-color: white;
        padding: 10px;
        width: 100%;
        box-shadow: 0 -2px 5px rgba(0, 0, 0, 0.1); /* Adiciona sombra para separação visual */
      }
      .dark-mode .comment-input-container{
        background-color: #121212;
      }
      
      
}

/* CSS: Transição suave e rotação para desktops */
@media screen and (min-width: 769px) {
    #theme-icon {
      transition: transform 0.5s ease, opacity 0.3s ease;
    }
    .rotate {
      transform: rotate(360deg);
    }
  }
  

/* Você pode manter os estilos originais para o ícone conforme necessário */

@media (min-width: 900px) {
    .video {
        height: 400px;
    }

    main {
        max-width: 95%;
        background-color: #fff;
        padding: 2px;
        margin: 20px auto;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        border-radius: 8px;
    }

    .camera-section {
        display: flex;
        justify-content: space-between;
        padding: 20px;
        gap: 15px;
    }

    .camera-videos {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 15px;
    }

    .side-card {
        display: block;
    }

    .dark-mode-text {
        display: none;
    }

    .card-slide {
        height: 116px;
        margin-top: 0;
    }

    #dark-mode-toggle {
        font-size: 24px;
        color: white;
        background: transparent;
        border: none;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: transform 0.3s ease;
        position: relative;
        margin-top: 50%;
    }

    .dark-mode-container {
        display: flex;
        align-items: center;
        gap: 15px;
        margin-top: -3%;
    }

      #dark-mode-toggle {
        margin-top: 48%; 
        margin-left: -23%;/* Ajuste fino, aumente/diminua conforme necessário */
    }
    }

@media (min-width: 1200px) {
    .camera-videos {
        grid-template-columns: repeat(2, 1fr);
        /* Mantém 2 colunas */
    }

    .video-card {
        position: relative;
        width: 100%;
        height: 250px;
        /* Aumenta a altura dos vídeos */
        overflow: hidden;
    }

    .video-card img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        /* Faz a imagem cobrir o cartão de maneira proporcional */
    }

    .video-card p {
        position: absolute;
        top: 91%;
        left: 50%;
        transform: translate(-50%, -50%);
        font-size: 16px;
        padding: 12px;
        color: whitesmoke;
        background-color: rgba(0, 0, 0, 0.856);
        /* Fundo semitransparente */
        text-align: center;
        width: 100%;
    }

    .video-container iframe {
        width: 100%;
        /* Largura total do contêiner */
        aspect-ratio: 16 / 9;
        /* Mantém a proporção 16:9 */
        border: none;
        /* Remove bordas */
        border-radius: 10px;
        /* Mantém bordas arredondadas */
        object-fit: fill;
        /* Ajusta o conteúdo dentro do contêiner */
    }
}

@media (min-width: 1500px) {
    .camera-videos {
        grid-template-columns: repeat(3, 1fr);
        /* 3 colunas */
    }

    main {
        width: 95%;
    }
}

@media (min-width: 1900px) {
    .camera-videos {
        grid-template-columns: repeat(4, 1fr);
        /* 4 colunas */
    }

    .noticias-slide {
        width: 500px;
        /* Ajuste para o slide de notícias */
    }
}

// Controle de slides para o carrossel
let currentSlide = 0;
const slides = document.querySelectorAll('.slide');
const dots = document.querySelectorAll('.dot');
const totalSlides = slides.length;

document.querySelector('.next').addEventListener('click', function () {
    changeSlide(1);
});

document.querySelector('.prev').addEventListener('click', function () {
    changeSlide(-1);
});

// Função para mudar o slide com base na direção ou no índice
function changeSlide(direction) {
    slides[currentSlide].classList.remove('active');
    dots[currentSlide].classList.remove('active');

    currentSlide = (currentSlide + direction + totalSlides) % totalSlides;

    slides[currentSlide].classList.add('active');
    dots[currentSlide].classList.add('active');

    const slider = document.querySelector('.slider');
    slider.style.transform = `translateX(-${currentSlide * 100}%)`;
}

// Alteração automática do slide a cada 5 segundos
let autoSlide = setInterval(() => changeSlide(1), 5000);

// Mudança manual ao clicar nas bolinhas
dots.forEach((dot, index) => {
    dot.addEventListener('click', () => {
        currentSlide = index;
        changeSlide(0);
        clearInterval(autoSlide);
        autoSlide = setInterval(() => changeSlide(1), 5000);
    });
});

document.addEventListener("DOMContentLoaded", function () {
    const menuToggle = document.querySelector(".menu-toggle");
    const menuIcon = menuToggle.querySelector("i");
    const menu = document.getElementById("nav");
    const overlay = document.querySelector(".overlay");
    const navLinks = document.querySelectorAll("#nav a");

    function fecharMenu() {
        if (window.innerWidth < 770) { // Só fecha o menu em telas pequenas
            menu.classList.add("animate__fadeOutRight");
            menu.classList.remove("animate__fadeInRight");

            setTimeout(() => {
                menu.style.display = "none";
                overlay.style.display = "none";
                menuToggle.classList.remove("active");
                menuIcon.classList.remove("fa-times"); // Remove o "X"
                menuIcon.classList.add("fa-bars"); // Volta para três barras
            }, 90);
        }
    }

    // Fecha o menu ao clicar em qualquer link de navegação
    navLinks.forEach(link => {
        link.addEventListener("click", function () {
            fecharMenu();
        });
    });

    // Fecha o menu ao clicar no overlay (fundo escuro)
    overlay.addEventListener("click", function () {
        fecharMenu();
    });

    // Abre ou fecha o menu ao clicar no botão de menu
    menuToggle.addEventListener("click", function (event) {
        if (!menu.classList.contains("animate__fadeInRight")) {
            menu.style.display = "block";
            menu.classList.add("animate__fadeInRight");
            menu.classList.remove("animate__fadeOutRight");
            overlay.style.display = "block";
            menuToggle.classList.add("active");
            menuIcon.classList.remove("fa-bars"); // Remove as três barras
            menuIcon.classList.add("fa-times"); // Mostra o "X"
        } else {
            fecharMenu();
        }
        event.stopPropagation();
    });
});

document.addEventListener("DOMContentLoaded", function () {
    const menuToggle = document.querySelector(".menu-toggle");
    const menuIcon = menuToggle.querySelector("i");

    menuToggle.addEventListener("click", function () {
        menuIcon.classList.toggle("fa-bars");
        menuIcon.classList.toggle("fa-times");
    });
});

// Abre o popup quando o cartão de vídeo é clicado
document.addEventListener("DOMContentLoaded", function () {
    // Função unificada para abrir o popup com a lógica completa
    function abrirPopup(cameraId) {
        const popup = document.getElementById(`popup-${cameraId}`);
        if (popup) {
            popup.style.display = "flex";
            document.body.classList.add("no-scroll");
            carregarComentarios(cameraId);
            const iframe = popup.querySelector("iframe");
            if (iframe && !iframe.src) {
                const videoSrc = iframe.getAttribute("data-src");
                iframe.src = videoSrc;
            }
        } else {
            console.error(`Popup com ID popup-${cameraId} não encontrado.`);
        }
    }

    // Função unificada para fechar o popup
    function fecharPopup(cameraId) {
        const popup = document.getElementById(`popup-${cameraId}`);
        if (popup) {
            // Remove o src do iframe para descarregar o vídeo
            const iframe = popup.querySelector("iframe");
            if (iframe) {
                iframe.src = "";
            }
            popup.style.display = "none";
            document.body.classList.remove("no-scroll");
        } else {
            console.error(`Popup com ID popup-${cameraId} não encontrado.`);
        }
    }

    // Torna as funções acessíveis globalmente para que os onclick inline funcionem
    window.abrirPopup = abrirPopup;
    window.fecharPopup = fecharPopup;

    // Event delegation para os cards que já existem no DOM
    document.querySelectorAll(".video-card, .map-video-card").forEach(card => {
        card.addEventListener("click", function () {
            const cameraId = card.getAttribute("data-id") || card.getAttribute("data-camera-id");
            if (cameraId) {
                abrirPopup(cameraId);
                // Fecha o popup do Leaflet, se estiver aberto
                if (typeof map !== "undefined" && map.closePopup) {
                    map.closePopup();
                }
            } else {
                console.error("Identificador da câmera não encontrado no card.");
            }
        });
    });

    // Fecha o popup quando o botão de fechar (".close") é clicado
    document.querySelectorAll(".popup .close").forEach(button => {
        button.addEventListener("click", function (e) {
            const popup = button.closest(".popup");
            if (popup) {
                const cameraId = popup.id.replace('popup-', '');
                if (cameraId) {
                    encerrarVisualizacao(cameraId);
                }
                popup.style.display = "none"; // Esconde o popup
                document.body.classList.remove("no-scroll");
            }
            e.stopPropagation();
        });
    });

    // Fecha o popup se o usuário clicar fora do conteúdo (na área de overlay)
    document.querySelectorAll(".popup").forEach(popup => {
        popup.addEventListener("click", function (e) {
            // Se o clique foi diretamente no overlay (fora do conteúdo interno)
            if (e.target === popup) {
                const cameraId = popup.id.replace('popup-', '');
                if (cameraId) {
                    encerrarVisualizacao(cameraId);
                }
                popup.style.display = "none";
                document.body.classList.remove("no-scroll");
            }
        });
    });
});

document.addEventListener("DOMContentLoaded", function () {
    const backToTopButton = document.querySelector(".back-to-top");

    window.addEventListener("scroll", function () {
        if (window.scrollY > 300) { // Exibe o botão ao descer 300px
            backToTopButton.classList.add("show");
        } else {
            backToTopButton.classList.remove("show");
        }
    });

    backToTopButton.addEventListener("click", function () {
        window.scrollTo({
            top: 0,
            behavior: "smooth" // Rolagem suave ao topo
        });
    });
});

// Função para abrir o popup da câmera (caso seja chamada de outro lugar)
function abrirPopup(id) {
    const popup = document.getElementById(`popup-${id}`);
    if (popup) {
        popup.style.display = "flex";
    } else {
        console.error(`Erro: popup-${id} não encontrado`);
    }
}

// Função para fechar o popup (caso seja chamada de outro lugar)
function fecharPopup(id) {
    const popup = document.getElementById(`popup-${id}`);
    if (popup) {
        popup.style.display = "none";
    } else {
        console.error(`Erro: popup-${id} não encontrado`);
    }
}

document.addEventListener("DOMContentLoaded", function () {
    const darkModeToggle = document.getElementById("dark-mode-toggle");
    const darkModeSwitch = document.getElementById("dark-mode-switch");
    const toggleBtn = document.querySelector(".toggle-btn");
    const body = document.body;
    const themeIcon = document.getElementById("theme-icon"); // Ícone que será animado

    // Verifica se o modo escuro está ativado no armazenamento local
    if (localStorage.getItem("darkMode") === "enabled") {
        body.classList.add("dark-mode");
        darkModeSwitch.checked = true;
        toggleBtn.classList.add("active");
        if (themeIcon) {
            themeIcon.classList.remove("fa-moon");
            themeIcon.classList.add("fa-sun");
        }
    }

    // Evento de clique no botão de modo escuro
    darkModeToggle.addEventListener("click", function () {
        // Se for em desktop, aplica a animação de rotação no ícone
        if (window.innerWidth > 768 && themeIcon) {
            themeIcon.classList.add("rotate");
        }
        
        // Alterna o modo escuro/claro
        body.classList.toggle("dark-mode");
        const darkModeEnabled = body.classList.contains("dark-mode");

        // Atualiza o estado do switch e do botão
        darkModeSwitch.checked = darkModeEnabled;
        toggleBtn.classList.toggle("active", darkModeEnabled);

        // Armazena a preferência do usuário
        localStorage.setItem("darkMode", darkModeEnabled ? "enabled" : "disabled");

        // Se for desktop, após a animação, atualiza o ícone
        if (window.innerWidth > 768 && themeIcon) {
            setTimeout(function () {
                themeIcon.classList.remove("rotate");
                if (darkModeEnabled) {
                    themeIcon.classList.remove("fa-moon");
                    themeIcon.classList.add("fa-sun");
                } else {
                    themeIcon.classList.remove("fa-sun");
                    themeIcon.classList.add("fa-moon");
                }
            }, 300);
        }
    });

    // Evento de clique no switch
    darkModeSwitch.addEventListener("change", function () {
        body.classList.toggle("dark-mode", darkModeSwitch.checked);
        toggleBtn.classList.toggle("active", darkModeSwitch.checked);

        // Armazena a preferência do usuário
        localStorage.setItem("darkMode", darkModeSwitch.checked ? "enabled" : "disabled");

        // Atualiza o ícone sem animação (opcional)
        if (themeIcon) {
            if (darkModeSwitch.checked) {
                themeIcon.classList.remove("fa-moon");
                themeIcon.classList.add("fa-sun");
            } else {
                themeIcon.classList.remove("fa-sun");
                themeIcon.classList.add("fa-moon");
            }
        }
    });
});

document.addEventListener("DOMContentLoaded", function () {
    document.querySelectorAll(".comment-input-container button").forEach(button => {
        button.addEventListener("click", function () {
            const cameraId = this.id.replace("submit-comment-", "");
            const comentario = document.getElementById(`new-comment-${cameraId}`).value.trim();

            if (!comentario) {
                alert("Digite um comentário!");
                return;
            }

            const userId = localStorage.getItem("userId");

            if (userId) {
                // Buscar o nome do usuário logado
                fetch("getUserName.php?userId=" + userId)
                    .then(response => response.json())
                    .then(data => {
                        const usuario = data.name || "Usuário";
                        enviarComentario(cameraId, usuario, comentario);
                    })
                    .catch(err => {
                        console.error("Erro ao buscar o nome do usuário:", err);
                        enviarComentario(cameraId, "Usuário", comentario);
                    });
            } else {
                alert("Você precisa estar logado para comentar.");
            }
        });
    });
});

function enviarComentario(cameraId, usuario, comentario) {
    fetch("salvar_comentario.php", {
        method: "POST",
        headers: { "Content-Type": "application/x-www-form-urlencoded" },
        body: `camera_id=${cameraId}&usuario=${encodeURIComponent(usuario)}&comentario=${encodeURIComponent(comentario)}`
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            document.getElementById(`new-comment-${cameraId}`).value = "";
            carregarComentarios(cameraId);
        } else {
            alert("Erro ao salvar comentário.");
        }
    });
}

function carregarComentarios(cameraId) {
    fetch(`carregar_comentarios.php?camera_id=${cameraId}`)
        .then(response => response.json())
        .then(comentarios => {
            const listaComentarios = document.getElementById(`comments-list-${cameraId}`);
            listaComentarios.innerHTML = "<h1>Comentários</h1>";

            comentarios.forEach(comentario => {
                const comentarioElemento = document.createElement("div");
                comentarioElemento.classList.add("comment");
                comentarioElemento.innerHTML = `
                    <div class="comment-header">
                        <i class="fas fa-user-circle fa-2x comment-avatar"></i>
                        <div class="comment-info">
                            <span class="comment-username">${comentario.usuario}</span>
                            <span class="comment-timestamp">${new Date(comentario.data).toLocaleString()}</span>
                        </div>
                    </div>
                    <div class="comment-text">
                        <p>${comentario.comentario}</p>
                    </div>
                `;
                listaComentarios.appendChild(comentarioElemento);
            });
        });
}

document.addEventListener("DOMContentLoaded", function () {
    const userId = localStorage.getItem("userId");
    const authLink = document.getElementById("auth-link");

    if (userId) {
        // Se o usuário está logado, mudar o link para "Sair"
        authLink.innerHTML = '<i class="fas fa-sign-out-alt"></i> Sair';
        authLink.href = "#"; // Remover redirecionamento para login
        authLink.addEventListener("click", function (event) {
            event.preventDefault(); // Evita o redirecionamento
            logoutUser(); // Chama a função de logout
        });
    }
});

// Função de logout
function logoutUser() {
    localStorage.removeItem("userId"); // Remove o ID do usuário
    window.location.reload(); // Recarrega a página para aplicar a mudança
}

document.addEventListener("DOMContentLoaded", function () {
    const searchInput = document.getElementById("search-input");
    const resultsContainer = document.getElementById("autocomplete-results");

    searchInput.addEventListener("input", function () {
        const query = searchInput.value.trim();

        if (query.length < 1) {
            resultsContainer.innerHTML = "";
            resultsContainer.style.display = "none";
            return;
        }

        fetch(`busca_cameras.php?query=${encodeURIComponent(query)}`)
            .then(response => response.json())
            .then(data => {
                resultsContainer.innerHTML = "";
                
                if (data.length > 0) {
                    resultsContainer.style.display = "block";

                    data.forEach(nome => {
                        const div = document.createElement("div");
                        div.classList.add("autocomplete-item");
                        div.textContent = nome;
                        div.addEventListener("click", function () {
                            searchInput.value = nome;
                            resultsContainer.innerHTML = "";
                            resultsContainer.style.display = "none";
                            
                            // Simula o clique no botão de busca
                            searchButton.click();
                        });
                        
                        resultsContainer.appendChild(div);
                    });
                } else {
                    resultsContainer.style.display = "none";
                }
            })
            .catch(error => console.error("Erro ao buscar sugestões:", error));
    });

    // Oculta as sugestões se clicar fora do campo de busca
    document.addEventListener("click", function (e) {
        if (!searchInput.contains(e.target) && !resultsContainer.contains(e.target)) {
            resultsContainer.style.display = "none";
        }
    });
});

document.addEventListener("DOMContentLoaded", function () {
    const searchInput = document.getElementById("search-input");
    const resultsContainer = document.getElementById("autocomplete-results");
    let currentIndex = -1; // Índice do item selecionado

    searchInput.addEventListener("keydown", function (event) {
        const items = resultsContainer.querySelectorAll(".autocomplete-item");

        if (items.length > 0) {
            if (event.key === "ArrowDown") {
                event.preventDefault();
                currentIndex = (currentIndex + 1) % items.length;
                updateSelection();
            } else if (event.key === "ArrowUp") {
                event.preventDefault();
                currentIndex = (currentIndex - 1 + items.length) % items.length;
                updateSelection();
            } else if (event.key === "Enter") {
                event.preventDefault();
                if (currentIndex >= 0) {
                    // Atualiza o input com o item selecionado
                    searchInput.value = items[currentIndex].textContent;
                    resultsContainer.innerHTML = "";
                }
                // Submete o formulário automaticamente
                searchInput.form.submit();
            } else if (event.key === "Backspace") {
                // Reseta a seleção durante a exclusão
                currentIndex = -1;
                clearSelection();
            }
        } else if (event.key === "Enter") {
            // Caso não haja itens no autocomplete, submete o formulário normalmente
            searchInput.form.submit();
        }
    });

    // Atualiza a seleção visual e o valor do input
    function updateSelection() {
        const items = resultsContainer.querySelectorAll(".autocomplete-item");
        items.forEach(item => item.classList.remove("selected"));
        if (currentIndex >= 0) {
            items[currentIndex].classList.add("selected");
            searchInput.value = items[currentIndex].textContent;
        }
    }

    // Limpa a seleção visual
    function clearSelection() {
        const items = resultsContainer.querySelectorAll(".autocomplete-item");
        items.forEach(item => item.classList.remove("selected"));
    }

    // Limpa os resultados ao perder o foco
    searchInput.addEventListener("blur", function () {
        setTimeout(() => {
            currentIndex = -1;
            resultsContainer.innerHTML = "";
        }, 200);
    });

    // Ao clicar em um item, preenche o campo de busca e submete o formulário
    resultsContainer.addEventListener("click", function (event) {
        if (event.target.classList.contains("autocomplete-item")) {
            searchInput.value = event.target.textContent;
            resultsContainer.innerHTML = "";
            searchInput.form.submit();
        }
    });
});

document.querySelectorAll('.slide').forEach(slide => {
    slide.addEventListener('click', function () {
      const cameraId = this.getAttribute('data-camera-id');
      if (cameraId) {
        const popup = document.getElementById(`popup-${cameraId}`);
        if (popup) {
          popup.style.display = "flex";
          document.body.classList.add("no-scroll");
          // Carrega os comentários para a câmera
          carregarComentarios(cameraId);
          // Verifica se o iframe já foi carregado e, se não, carrega-o
          const iframe = popup.querySelector("iframe");
          if (iframe && !iframe.src) {
            const videoSrc = iframe.getAttribute("data-src");
            iframe.src = videoSrc;
          }
        } else {
          console.error(`Popup com ID popup-${cameraId} não encontrado.`);
        }
      } else {
        console.error("Atributo 'data-camera-id' não definido no slide.");
      }
    });
});

// Para slides que possuem câmera, manter a funcionalidade original
document.querySelectorAll('.slide:not(.no-popup)').forEach(slide => {
    slide.addEventListener('click', function () {
      const cameraId = this.getAttribute('data-camera-id');
      if (cameraId) {
        const popup = document.getElementById(`popup-${cameraId}`);
        if (popup) {
          popup.style.display = "flex";
          document.body.classList.add("no-scroll");
          carregarComentarios(cameraId);
          const iframe = popup.querySelector("iframe");
          if (iframe && !iframe.src) {
            const videoSrc = iframe.getAttribute("data-src");
            iframe.src = videoSrc;
          }
        } else {
          console.error(`Popup com ID popup-${cameraId} não encontrado.`);
        }
      }
    });
});

let currentFullscreenContainer = null;

function enterFullScreen(containerId) {
  var container = document.getElementById(containerId);
  currentFullscreenContainer = container;
  
  if (container.requestFullscreen) {
    container.requestFullscreen().then(() => {
      if (screen.orientation && screen.orientation.lock) {
        screen.orientation.lock("landscape").catch(err => console.error("Erro ao bloquear a orientação:", err));
      }
      toggleFullscreenButtons(container, true);
    }).catch(err => console.error("Erro ao entrar no fullscreen:", err));
  } else if (container.webkitRequestFullscreen) { // Safari
    container.webkitRequestFullscreen();
    if (screen.orientation && screen.orientation.lock) {
      screen.orientation.lock("landscape").catch(err => console.error("Erro ao bloquear a orientação:", err));
    }
    toggleFullscreenButtons(container, true);
  } else if (container.msRequestFullscreen) { // IE11
    container.msRequestFullscreen();
    if (screen.orientation && screen.orientation.lock) {
      screen.orientation.lock("landscape").catch(err => console.error("Erro ao bloquear a orientação:", err));
    }
    toggleFullscreenButtons(container, true);
  } else {
    alert("Fullscreen não é suportado neste dispositivo.");
  }
}

function exitFullScreen() {
  if (document.exitFullscreen) {
    document.exitFullscreen();
  } else if (document.webkitExitFullscreen) { // Safari
    document.webkitExitFullscreen();
  } else if (document.msExitFullscreen) { // IE11
    document.msExitFullscreen();
  }
  
  if (screen.orientation && screen.orientation.unlock) {
    screen.orientation.unlock();
  }
  
  // Altera manualmente os botões para o estado original
  if (currentFullscreenContainer) {
    toggleFullscreenButtons(currentFullscreenContainer, false);
    currentFullscreenContainer = null;
  }
}

function toggleFullscreenButtons(container, isFullscreen) {
  // Procura todos os botões dentro do container
  var buttons = container.querySelectorAll("button");
  buttons.forEach(function(button) {
    if (button.innerHTML.indexOf("fa-compress") !== -1) {
      button.style.display = isFullscreen ? "block" : "none";
    }
    if (button.innerHTML.indexOf("fa-expand") !== -1) {
      button.style.display = isFullscreen ? "none" : "block";
    }
  });
}

document.addEventListener("fullscreenchange", function() {
  if (!document.fullscreenElement) {
    // Aguarda 100ms para garantir que a transição tenha finalizado
    setTimeout(() => {
      document.body.style.transform = "none";
      document.body.style.zoom = "1";
      document.documentElement.style.transform = "none";
      window.scrollTo(0, 0);
    }, 100);
  }
});

// Função para coletar informações do navegador e dispositivo
function getUserDeviceInfo() {
    let userAgent = navigator.userAgent;
    let deviceType = /android/i.test(userAgent) ? 'Android' : 
                     /iPhone|iPad|iPod/i.test(userAgent) ? 'iOS' : 'Desktop';
    
    let browser = /chrome/i.test(userAgent) && !/edge/i.test(userAgent) ? 'Chrome' :
                  /firefox/i.test(userAgent) ? 'Firefox' :
                  /safari/i.test(userAgent) && !/chrome/i.test(userAgent) ? 'Safari' : 'Desconhecido';

    let androidVersion = '';
    let match = userAgent.match(/Android\s([0-9\.]+)/);
    if (match) {
        androidVersion = match[1];
    }

    return {
        userAgent: userAgent,
        deviceType: deviceType,
        browser: browser,
        androidVersion: androidVersion,
        screenWidth: window.screen.width,
        screenHeight: window.screen.height,
        language: navigator.language
    };
}

// Enviar os dados para o servidor quando a página for carregada
window.addEventListener("load", function () {
    let visitorData = getUserDeviceInfo();

    fetch('save_visitor.php', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(visitorData)
    })
    .then(response => response.text())
    .then(data => });

function atualizarContadores() {
    fetch('contador.php')
        .then(response => response.text())
        .then(text => {
            return JSON.parse(text);
        })
        .then(data => {
            document.getElementById('total').textContent = data.total;
            document.getElementById('online').textContent = data.online;
        })
        .catch(error => console.error('Erro ao buscar contadores:', error));
}

// Atualiza os contadores apenas ao carregar a página
atualizarContadores();

// Função para registrar uma nova visualização ao abrir o popup
// Função para registrar a abertura do popup
function registrarVisualizacao(cameraId) {
    fetch(`visualizacoes.php?camera_id=${cameraId}&acao=abrir`)
        .then(response => response.json())
        .then(data => {
            atualizarInterface(cameraId, data);
        })
        .catch(error => console.error('❌ Erro ao registrar visualização:', error));
}

// Função para registrar o fechamento do popup
function encerrarVisualizacao(cameraId) {
    fetch(`visualizacoes.php?camera_id=${cameraId}&acao=fechar`)
        .then(response => response.json())
        .then(data => {
            atualizarInterface(cameraId, data);
        })
        .catch(error => console.error('❌ Erro ao encerrar visualização:', error));
}

// Atualiza a interface com os novos valores da API
function atualizarInterface(cameraId, data) {
    document.getElementById(`total-${cameraId}`).textContent = data.total ?? 0;
    document.getElementById(`online-${cameraId}`).textContent = data.online ?? 0;
}

// Evento para abrir o popup
document.querySelectorAll('.video-card').forEach(card => {
    card.addEventListener('click', function () {
        const cameraId = this.getAttribute('data-id');
        if (cameraId) {
            registrarVisualizacao(cameraId);
        }
    });
});

// Evento para fechar o popup corretamente ao clicar no "X"
document.querySelectorAll('.popup .close').forEach(button => {
    button.addEventListener('click', function () {
        const popup = this.closest('.popup');
        if (popup) {
            const cameraId = popup.id.replace('popup-', '');
            if (cameraId) {
                encerrarVisualizacao(cameraId);
            }
            popup.style.display = "none"; // Esconde o popup
            document.body.classList.remove("no-scroll");
        }
    });
});

// Atualiza o contador online periodicamente sem alterar valores no banco
setInterval(() => {
    document.querySelectorAll('.video-card').forEach(card => {
        const cameraId = card.getAttribute('data-id');
        if (cameraId) {
            fetch(`visualizacoes.php?camera_id=${cameraId}&acao=status`)
                .then(response => response.json())
                .then(data => {
                    atualizarInterface(cameraId, data);
                })
                .catch(error => console.error('❌ Erro ao atualizar status:', error));
        }
    });
}, 1000);


<?php
include 'conexao.php';

$camera_id = isset($_GET['camera_id']) ? (int) $_GET['camera_id'] : 0;
$acao = isset($_GET['acao']) ? $_GET['acao'] : '';

if ($camera_id <= 0) {
    echo json_encode(["error" => "ID de câmera inválido"]);
    exit;
}

// Log para depuração
error_log("📌 Requisição recebida - ID: $camera_id, Ação: $acao");

// Criar um registro caso a câmera ainda não tenha
$sql_insert = "INSERT INTO visualizacoes (camera_id, total, online) 
               VALUES (?, 0, 0) ON DUPLICATE KEY UPDATE camera_id = camera_id";
$stmt = $conexao->prepare($sql_insert);
$stmt->bind_param("i", $camera_id);
$stmt->execute();

if ($acao === 'abrir') {
    // Incrementa total sempre que abrir
    $sql_update_total = "UPDATE visualizacoes SET total = total + 1 WHERE camera_id = ?";
    $stmt = $conexao->prepare($sql_update_total);
    $stmt->bind_param("i", $camera_id);
    $stmt->execute();
    error_log("✅ Ação 'abrir': total incrementado para câmera $camera_id");

    // Incrementa online sempre que abrir
    $sql_update_online = "UPDATE visualizacoes SET online = online + 1 WHERE camera_id = ?";
    $stmt = $conexao->prepare($sql_update_online);
    $stmt->bind_param("i", $camera_id);
    $stmt->execute();
    error_log("✅ Ação 'abrir': online incrementado para câmera $camera_id");

} elseif ($acao === 'fechar') {
    // Garante que o decremento aconteça e que "online" nunca fique negativo
    $sql_update = "UPDATE visualizacoes SET online = CASE 
                    WHEN online > 0 THEN online - 1 
                    ELSE 0 END WHERE camera_id = ?";
    $stmt = $conexao->prepare($sql_update);
    $stmt->bind_param("i", $camera_id);
    $stmt->execute();
    
    // Log para depuração
    if ($stmt->affected_rows > 0) {
        error_log("🛑 Ação 'fechar': online decrementado para câmera $camera_id");
    } else {
        error_log("⚠️ Ação 'fechar': Nenhum decremento feito (online já estava 0) para câmera $camera_id");
    }
}

// Busca os valores atualizados e os retorna como JSON
$sql_select = "SELECT total, online FROM visualizacoes WHERE camera_id = ?";
$stmt = $conexao->prepare($sql_select);
$stmt->bind_param("i", $camera_id);
$stmt->execute();
$result = $stmt->get_result();
$data = $result->fetch_assoc();

// Se não houver dados, retorna valores padrão
if (!$data) {
    $data = ["total" => 0, "online" => 0];
}

error_log("🔄 Resposta final para câmera $camera_id - Total: {$data['total']}, Online: {$data['online']}");
header('Content-Type: application/json');
echo json_encode($data);
?>
